import json
import socket
import threading
import getpass
from typing import Tuple

from backend.Models.Model import SecurePrintDatabase

class SecurePrintServer:
    def __init__(self, host='localhost', port=9090):
        self.host = host
        self.port = port
        self.db = SecurePrintDatabase()
        self.running = False
    
    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        try:
            data = client_socket.recv(4096).decode()
            request = json.loads(data)
            
            if request.get('type') == 'submit_job':
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
                success, user_id = self.db.verify_user(
                    request['user_id'], 
                    request['user_password']
                )
                
                if success:
                    print_password = self.db.add_print_job(
                        user_id,
                        request['metadata']['filename'],
                        request['document_data'],
                        request['metadata']['pages']
                    )
                    response = {'status': 'success', 'print_password': print_password}
                else:
                    response = {'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}
                
            elif request.get('type') == 'get_job':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø–∞—Ä–æ–ª—é
                job = self.db.get_print_job(request['password'])
                if job:
                    response = {'status': 'found', 'job': job}
                    self.db.mark_job_printed(request['password'])
                else:
                    response = {'status': 'not_found'}
            
            elif request.get('type') == 'get_user_jobs':
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                success, user_id = self.db.verify_user(
                    request['user_id'], 
                    request['user_password']
                )
                
                if success:
                    jobs = self.db.get_user_jobs(user_id)
                    response = {'status': 'success', 'jobs': jobs}
                else:
                    response = {'status': 'error', 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}
            
            else:
                response = {'status': 'error', 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞'}
            
            client_socket.send(json.dumps(response, default=str).encode())
            
        except Exception as e:
            response = {'status': 'error', 'message': str(e)}
            client_socket.send(json.dumps(response).encode())
        finally:
            client_socket.close()
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        self.running = True
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind((self.host, self.port))
        server_socket.listen(5)
        print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.db_name}")
        
        while self.running:
            try:
                client_socket, address = server_socket.accept()
                thread = threading.Thread(
                    target=self.handle_client, 
                    args=(client_socket, address)
                )
                thread.start()
            except:
                break

class SecurePrintClient:
    def __init__(self, server_host='localhost', server_port=9090):
        self.server_host = server_host
        self.server_port = server_port
    
    def get_user_credentials(self) -> Tuple[str, str]:
        """–ó–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\n=== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===")
        username = input("–õ–æ–≥–∏–Ω: ")
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        return username, password
    
    def submit_print_job(self, document_path: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø–µ—á–∞—Ç—å"""
        try:
            username, password = self.get_user_credentials()
            
            with open(document_path, 'rb') as f:
                document_data = f.read()
            
            metadata = {
                'filename': document_path,
                'pages': len(document_data) // 1000 + 1,
            }
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.connect((self.server_host, self.server_port))
                request = {
                    'type': 'submit_job',
                    'user_id': username,
                    'user_password': password,
                    'document_data': document_data.decode('latin-1'),
                    'metadata': metadata
                }
                sock.send(json.dumps(request).encode())
                
                response = json.loads(sock.recv(1024).decode())
                
                if response['status'] == 'success':
                    print(f"\n‚úÖ –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–µ—á–∞—Ç–∏: {response['print_password']}")
                    return response['print_password']
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response['message']}")
                    return None
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None
    
    def get_user_jobs(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        try:
            username, password = self.get_user_credentials()
            
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.connect((self.server_host, self.server_port))
                request = {
                    'type': 'get_user_jobs',
                    'user_id': username,
                    'user_password': password
                }
                sock.send(json.dumps(request).encode())
                
                response = json.loads(sock.recv(4096).decode())
                
                if response['status'] == 'success':
                    print(f"\nüìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:")
                    for job in response['jobs']:
                        status = "‚úÖ –†–∞—Å–ø–µ—á–∞—Ç–∞–Ω" if job['status'] == 'printed' else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                        print(f"‚Ä¢ {job['document_name']} - {status} - –ü–∞—Ä–æ–ª—å: {job['print_password']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response['message']}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
