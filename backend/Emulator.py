import json
import socket
import time

class PrinterEmulator:
    def __init__(self, server_host='localhost', server_port=9090):
        self.server_host = server_host
        self.server_port = server_port
    
    def release_job(self):
        """–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—á–∞—Ç–∏ –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ"""
        try:
            print("\n=== –ü–ê–ù–ï–õ–¨ –ü–†–ò–ù–¢–ï–†–ê ===")
            print_password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–µ—á–∞—Ç–∏: ").strip().upper()
            
            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É {self.server_host}:{self.server_port}...")
            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            
            try:
                sock.connect((self.server_host, self.server_port))
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
                request = {
                    'type': 'get_job',
                    'password': print_password
                }
                
                print("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä—É...")
                sock.send(json.dumps(request).encode())
                
                print("‚è≥ –û–∂–∏–¥–∞—é –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
                response_data = sock.recv(4096).decode()
                print(f"üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_data}")
                
                response = json.loads(response_data)
                
                if response['status'] == 'found':
                    job = response['job']
                    print(f"\nüñ®Ô∏è  –ü–µ—á–∞—Ç–∞–µ–º: {job['document_name']}")
                    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {job['full_name']}")
                    print(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü: {job['page_count']}")
                    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω!")
                    return True
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω")
                    return False
                    
            except socket.timeout:
                print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                return False
            except ConnectionRefusedError:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä?")
                return False
            finally:
                sock.close()
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False